package org.firstinspires.ftc.teamcode;

import com.acmerobotics.dashboard.FtcDashboard;
import com.acmerobotics.dashboard.config.Config;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.openftc.easyopencv.OpenCvCamera;
import org.openftc.easyopencv.OpenCvCameraFactory;
import org.openftc.easyopencv.OpenCvCameraRotation;
import org.opencv.core.*;
import org.opencv.imgproc.Imgproc;

import java.util.*;

@Config
@TeleOp(name = "UltraSmooth Color Tracker")
public class UltraSmoothColorTracker extends LinearOpMode {

    public static double speed = 0.5;
    public static double hueThreshold = 25;
    public static double distanceBalanceScale = 0.015;
    public static double smoothingFactor = 0.12;
    public static double correctionPower = 1.6;
    public static double minArea = 300;

    private OpenCvCamera camera;
    private ColorSensor colorSensor;
    private DistanceSensor leftSensor, rightSensor;
    private DcMotor fl, fr, bl, br;

    private enum TargetColor {
        RED(0), BLUE(210), YELLOW(30);
        public final float hue;
        TargetColor(float h) { this.hue = h; }
    }

    private final List<TargetColor> activeProfiles = new ArrayList<>();

    private double leftFiltered = -1, rightFiltered = -1;

    private BoundingBoxPipeline pipeline;

    @Override
    public void runOpMode() {
        initHardware();
        autoSelectProfiles();
        setupCamera();
        FtcDashboard.getInstance().startCameraStream(camera, 0);

        waitForStart();

        while (opModeIsActive()) {
            double centerX = pipeline.getCenterX();
            boolean detected = centerX >= 0;

            double visualCorrection = getVisualCorrection(centerX);
            double distanceCorrection = getDistanceCorrection();
            double correction = (visualCorrection + distanceCorrection) * speed;
            correction = Math.max(-1.0, Math.min(1.0, correction));

            boolean confirmed = isColorConfirmed();
            pipeline.setBoxColor(confirmed ? new Scalar(0, 255, 0) : new Scalar(0, 0, 255));

            applyStrafePower(detected ? correction : 0);
            displayTelemetry(centerX, correction, confirmed);
        }
    }

    private void initHardware() {
        colorSensor = hardwareMap.get(ColorSensor.class, "colorSensor");
        leftSensor = hardwareMap.get(DistanceSensor.class, "leftSensor");
        rightSensor = hardwareMap.get(DistanceSensor.class, "rightSensor");

        fl = hardwareMap.get(DcMotor.class, "frontLeft");
        fr = hardwareMap.get(DcMotor.class, "frontRight");
        bl = hardwareMap.get(DcMotor.class, "backLeft");
        br = hardwareMap.get(DcMotor.class, "backRight");
    }

    private void autoSelectProfiles() {
        float hue = getCurrentHue();
        if (hue > 180 && hue < 260) activeProfiles.add(TargetColor.BLUE);
        else if (hue < 20 || hue > 330) activeProfiles.add(TargetColor.RED);
        activeProfiles.add(TargetColor.YELLOW);
    }

    private float getCurrentHue() {
        float[] hsv = new float[3];
        android.graphics.Color.RGBToHSV(
                colorSensor.red() * 255 / 800,
                colorSensor.green() * 255 / 800,
                colorSensor.blue() * 255 / 800,
                hsv);
        return hsv[0];
    }

    private boolean isColorConfirmed() {
        float hue = getCurrentHue();
        for (TargetColor c : activeProfiles)
            if (Math.abs(c.hue - hue) < hueThreshold) return true;
        return false;
    }

    private double getVisualCorrection(double centerX) {
        if (centerX < 0) return 0;
        double error = (centerX - 160) / 160.0;
        return Math.signum(error) * Math.pow(Math.abs(error), correctionPower);
    }

    private double getDistanceCorrection() {
        double l = leftSensor.getDistance(com.qualcomm.robotcore.hardware.DistanceUnit.CM);
        double r = rightSensor.getDistance(com.qualcomm.robotcore.hardware.DistanceUnit.CM);
        leftFiltered = leftFiltered < 0 ? l : smoothingFactor * l + (1 - smoothingFactor) * leftFiltered;
        rightFiltered = rightFiltered < 0 ? r : smoothingFactor * r + (1 - smoothingFactor) * rightFiltered;
        return (rightFiltered - leftFiltered) * distanceBalanceScale;
    }

    private void applyStrafePower(double power) {
        fl.setPower(power);
        bl.setPower(power);
        fr.setPower(-power);
        br.setPower(-power);
    }

    private void displayTelemetry(double centerX, double correction, boolean confirmed) {
        telemetry.addData("Hue", getCurrentHue());
        telemetry.addData("Confirmed", confirmed);
        telemetry.addData("ObjectX", centerX);
        telemetry.addData("Correction", correction);
        telemetry.addData("LDist", leftFiltered);
        telemetry.addData("RDist", rightFiltered);
        telemetry.update();
    }

    private void setupCamera() {
        WebcamName cam = hardwareMap.get(WebcamName.class, "Webcam 1");
        int viewId = hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        camera = OpenCvCameraFactory.getInstance().createWebcam(cam, viewId);
        pipeline = new BoundingBoxPipeline();
        camera.setPipeline(pipeline);
        camera.openCameraDeviceAsync(() -> camera.startStreaming(320, 240, OpenCvCameraRotation.UPRIGHT));
    }

    public static class BoundingBoxPipeline extends org.openftc.easyopencv.OpenCvPipeline {
        private double centerX = -1;
        private Scalar boxColor = new Scalar(0, 0, 255);

        public void setBoxColor(Scalar color) { boxColor = color; }
        public double getCenterX() { return centerX; }

        @Override
        public Mat processFrame(Mat input) {
            Imgproc.GaussianBlur(input, input, new Size(5, 5), 0);
            Mat hsv = new Mat();
            Imgproc.cvtColor(input, hsv, Imgproc.COLOR_RGB2HSV);
            Mat mask = new Mat();
            Core.inRange(hsv, new Scalar(0, 100, 100), new Scalar(255, 255, 255), mask);
            List<MatOfPoint> contours = new ArrayList<>();
            Imgproc.findContours(mask, contours, new Mat(), Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);

            Rect largest = null;
            double maxArea = 0;
            for (MatOfPoint contour : contours) {
                double area = Imgproc.contourArea(contour);
                if (area > maxArea) {
                    Rect rect = Imgproc.boundingRect(contour);
                    maxArea = area;
                    largest = rect;
                }
            }

            if (largest != null && maxArea > minArea) {
                Imgproc.rectangle(input, largest.tl(), largest.br(), boxColor, 2);
                centerX = largest.x + largest.width / 2.0;
            } else centerX = -1;

            return input;
        }
    }
}
